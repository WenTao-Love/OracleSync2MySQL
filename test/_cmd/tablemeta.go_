package _cmd

import (
	"fmt"
	"strconv"
	"time"
)

// IdxCreate 单线程，不使用goroutine创建索引
func (tb *Table) IdxCreate(logDir string) (result []string) {
	startTime := time.Now()
	failedCount := 0
	id := 0
	// 查询索引、主键、唯一约束等信息，批量生成创建语句
	sqlStr := fmt.Sprintf("SELECT (CASE WHEN C.CONSTRAINT_TYPE = 'P' OR C.CONSTRAINT_TYPE = 'R' THEN 'ALTER TABLE `' || T.TABLE_NAME || '` ADD CONSTRAINT ' ||'`'||T.INDEX_NAME||'`' || (CASE WHEN C.CONSTRAINT_TYPE = 'P' THEN ' PRIMARY KEY (' ELSE ' FOREIGN KEY (' END) || listagg(T.COLUMN_NAME,',') within group(order by T.COLUMN_position) || ');' ELSE 'CREATE ' || (CASE WHEN I.UNIQUENESS = 'UNIQUE' THEN I.UNIQUENESS || ' ' ELSE CASE WHEN I.INDEX_TYPE = 'NORMAL' THEN '' ELSE  I.INDEX_TYPE || ' '  END END) || 'INDEX ' || '`'||T.INDEX_NAME||'`' || ' ON ' || T.TABLE_NAME || '(' ||listagg(T.COLUMN_NAME,',') within group(order by T.COLUMN_position) || ');' END) SQL_CMD FROM USER_IND_COLUMNS T, USER_INDEXES I, USER_CONSTRAINTS C WHERE T.INDEX_NAME = I.INDEX_NAME  AND T.INDEX_NAME = C.CONSTRAINT_NAME(+)  and i.index_type != 'FUNCTION-BASED NORMAL'  GROUP BY T.TABLE_NAME, T.INDEX_NAME, I.UNIQUENESS, I.INDEX_TYPE,C.CONSTRAINT_TYPE",tableName)
	//fmt.Println(sql)
	rows, err := srcDb.Query(sqlStr)
	if err != nil {
		log.Error(err)
	}
	defer rows.Close()
	// 从sql结果集遍历，获取到创建语句
	for rows.Next() {
		id += 1
		if err := rows.Scan(&tb.destIdxSql); err != nil {
			log.Error(err)
		}
		// 创建目标索引，主键、其余约束
		log.Info(fmt.Sprintf("%v ProcessingID %s %s", time.Now().Format("2006-01-02 15:04:05.000000"), strconv.Itoa(id), tb.destIdxSql))
		if _, err = destDb.Exec(tb.destIdxSql); err != nil {
			log.Error("index ", tb.destIdxSql, " create index failed ", err)
			LogError(logDir, "idxCreateFailed", tb.destIdxSql, err)
			failedCount += 1
		}
	}
	endTime := time.Now()
	cost := time.Since(startTime)
	log.Info("index  count ", id)
	result = append(result, "Index", startTime.Format("2006-01-02 15:04:05.000000"), endTime.Format("2006-01-02 15:04:05.000000"), strconv.Itoa(failedCount), cost.String())
	return result
}
